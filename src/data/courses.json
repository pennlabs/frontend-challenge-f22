[
  {
    "dept": "CIS",
    "number": 110,
    "title": "Introduction to Computer Programming (with Java, for Beginners",
    "description": "Introduction to Computer Programming is the first course in our series introducing students to computer science. In this class you will learn the fundamentals of computer programming in Java, with emphasis on applications in science and engineering. You will also learn about the broader field of computer science and algorithmic thinking, the fundamental approach that computer scientists take to solving problems."
  },
  {
    "dept": "CIS",
    "number": 120,
    "title": "Programming Languages and Techniques I",
    "description": "A fast-paced introduction to the fundamental concepts of programming and software design.  This course assumes some previous programming experience, at the level of a high school computer science class or CIS110.  (If you got at least 4 in the AP Computer Science A or AB exam, you will do great.)  No specific programming language background is assumed: basic experience with any language (for instance Java, C, C++, VB, Python, Perl, or Scheme) is fine.  If you have never programmed before, you should take CIS 110 first."
  },
  {
    "dept": "CIS",
    "number": 121,
    "title": "Programming Languages and Techniques I",
    "prereqs": ["CIS 120", "CIS 160"],
    "description": "This is a course about Algorithms and Data Structures using the JAVA programming language. We introduce the basic concepts about complexity of an algorithm and methods on how to compute the running time of algorithms. Then, we describe data structures like stacks, queues, maps, trees, and graphs, and we construct efficient algorithms based on these representations. The course builds upon existing implementations of basic data structures in JAVA and extends them for the structures like trees, studying the performance of operations on such structures, and their efficiency when used in real-world applications. A large project introducing students to the challenges of software engineering concludes the course."
  },

  {
    "dept": "CIS",
    "number": 125,
    "title": "Technology and Policy ",
    "description": "Have you ever wondered why sharing music and video generates such political and legal controversies?  Is information on your PC safe and should law enforcement be able to access information you enter on the Web?  Will new devices allow tracking of your every move and every purchase?\nCIS 125 is focused on developing an understanding of existing and emerging technologies, along with the political, societal and economic impacts of those technologies.  The technologies are spread across a number of engineering areas and each of them raise issues that are of current concern or are likely to be a future issue."
  },
  {
    "dept": "CIS",
    "number": 140,
    "title": "Introduction to Cognitive Science",
    "crossListed": ["PHIL 044", "LING 105", "PSYCH 107", "COGS 001", "PPE 140"],
    "description": "How do minds work? This course surveys a wide range of answers to this question from disciplines ranging from philosophy to neuroscience. The course devotes special attention to the use of simple computational and mathematical models. Topics include perception, learning, memory, decision making, emotion and consciousness."
  },
  {
    "dept": "CIS",
    "number": 160,
    "title": "Mathematical Foundations of Computer Science",
    "description": "What are the basic mathematical concepts and techniques needed in computer science? This course provides an introduction to proof principles and logics, functions and relations, induction principles, combinatorics and graph theory, as well as a rigorous grounding in writing and reading mathematical proofs."
  },
  {
    "dept": "CIS",
    "number": 190,
    "title": "C++ Programming",
    "prereqs": ["CIS 240"],
    "description": "This course will provide an introduction to programming in C++ and is intended for students who already have some exposure to programming in another language such as Java. C++ provides the programmer with a greater level of control over machine resources and are commonly used in situations where low level access or performance are important. This course will illuminate the issues associated with programming at this level and will cover issues such as explicit memory management, pointers, the compilation process and debugging. The course will involve several programming projects which will provide students with the experience they need to program effectively in these languages. This course assumes programming experience equivalent to CIS 110, CIS 120 or ESE 112 as a prerequisite."
  },
  {
    "dept": "CIS",
    "number": 191,
    "title": "Using and Understanding Unix and Linux",
    "prereqs": ["CIS 110"],
    "description": "Unix, in its many forms, runs much of the world's computer infrastructure, from cable modems and cell phones to the giant clusters that power Google and Amazon. This half-credit course provides a thorough introduction to Unix and Linux. Topics will range from critical basic skills such as examining and editing files, compiling programs and writing shell scripts, to higher level topics such as the architecture of Unix and its programming model. The material learned is applicable to many classes, including CIS 240, CIS 331, CIS 341, CIS 371/372, and CIS 380."
  },
  {
    "dept": "CIS",
    "number": 192,
    "title": "Python Programming",
    "prereqs": ["CIS 120", "ESE 112"],
    "description": "Python is an elegant, concise, and powerful language that is useful for tasks large and small. Python has quickly become a popular language for getting things done efficiently in many in all domains: scripting, systems programming, research tools, and web development. This course will provide an introduction to this modern high-level language using hands-on experience through programming assignments and a collaborative final application development project."
  },
  {
    "dept": "CIS",
    "number": 193,
    "title": "C# Programming",
    "prereqs": ["CIS 110"],
    "description": "C# is the premier programming language for the .NET framework.  Over the last decade, the language has evolved to meet the needs of a variety of programming styles while supporting the ever-growing capabilities of the .NET runtime and libraries.  This course provides a thorough introduction to the C# language and the .NET framework, building on the skills gained in the introductory programming courses (CIS 110, CIS 120, or ESE 112).  In addition to providing the student with a solid background in C#, this course also explores topics that the .NET platform exposes such as object-oriented design, .NET runtime internals, and others based on class interest.  A series of short, weekly homework assignments reinforces the concepts introduced in class and a group-based final project of the students' design allows them to apply their C# knowledge toward a substantial problem."
  },
  {
    "dept": "CIS",
    "number": 194,
    "title": "Haskell Programming",
    "description": "Haskell is a high-level, purely functional programming language with a strong static type system and elegant mathematical underpinnings. It is being increasingly used in industry by organizations such as Facebook, AT&T, and NASA, along with several financial firms. We will explore the joys of functional programming, using Haskell as a vehicle. The aim of the course will be to allow you to use Haskell to easily and conveniently write practical programs. All are welcome, including those with no programming experience. Evaluation will be based on regular homework assignments and class participation."
  },
  {
    "dept": "CIS",
    "number": 195,
    "title": "Mobile App Development",
    "prereqs": ["CIS 120"],
    "description": "This project-oriented course is centered around application development on current mobile platforms like iOS and Android. Section 201 (iOS) will be taught in Swift, and cover iOS fundamentals such as app lifecycles, storyboarding, delegation, networking and usage of both native and external libraries. Section 202 (Android) will be taught in Java with XML and will cover Android fundamentals such as layout, app lifecycles and different APIs."
  },
  {
    "dept": "CIS",
    "number": 196,
    "title": "Ruby on Rails Web Development",
    "prereqs": ["CIS 120"],
    "description": "This course will teach the fundamentals of developing web applications using Ruby on Rails, a rapid-development web framework developed by 37signals. The topics covered will start with Ruby, the language that powers Rails, and include all topics required to develop and deploy production-ready web applications with Rails. During the entire course, students will be working on a project of their own choosing which will develop as they learn additional concepts. Upon completion of the course this application will be deployed and accessible to the public. Students will be encouraged to continue building their applications even after the course given support from the Philadelphia Ruby community."
  },
  {
    "dept": "CIS",
    "number": 197,
    "title": "JavaScript",
    "description": "This course provides an introduction to modern web development frameworks, techniques, and practices used to deliver robust client side applications on the web. The emphasis will be on developing JavaScript programs that run in the browser. Topics covered include the JavaScript language, web browser internals, the Document Object Model (DOM), HTML5, client-side app architecture and compile-to-JS languages like (Coffeescript, TypeScript, etc.). This course is most useful for students who have some programming and web development experience and want to develop moderate JavaScript skills to be able to build complex, interactive applications in the browser."
  },
  {
    "dept": "CIS",
    "number": 198,
    "title": "Rust Programming",
    "prereqs": [
      "CIS 120 or exposure functional programming",
      "CIS 240 (or exposure to C or C++)"
    ],
    "description": "Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety. In this course we will cover Rust as a practical alternative to C and C++ for systems programming. We will explore design choices and language features that allow Rust to have performance comparable to C and C++ without compromising speed or correctness.\nTopics covered include: the Rust type system (traits, generics), memory management (move semantics, borrowing, and lifetimes), functional programming (closures, higher order functions, ADTs), parallelism and concurrency, Rust for the web (WASM).\nEvaluation is based on regular homework assignments as well as a final project and class participation."
  },
  {
    "dept": "CIS",
    "number": 240,
    "title": "Introduction to Computer Architecture",
    "prereqs": ["CIS 110 or equivalent experience"],
    "description": "You know how to program, but do you know how computers really work? How do millions of transistors come together to form a complete computing system? This bottom-up course begins with transistors and simple computer hardware structures, continues with low-level programming using primitive machine instructions, and finishes with an introduction to the C programming language. This course is a broad introduction to all aspects of computer systems architecture and serves as the foundation for subsequent computer systems courses, such as Digital Systems Organization and Design (CIS 371), Computer Operating Systems (CIS 380), and Compilers and Interpreters (CIS 341)."
  },
  {
    "dept": "CIS",
    "number": 261,
    "title": "Discrete Probability, Stochastic Processes, and Statistical Inference",
    "prereqs": ["CIS 160"],
    "description": "The purpose of this course is to provide a 1 CU educational experience which tightly integrates the theory and applications of discrete probability, discrete stochastic processes, and discrete statistical inference in the study of computer science.\nThe intended audience for this class is both those students who are CS majors as well as those intending to be CS majors. Specifically, it will be assumed that the students will know: Set Theory, Mathematical Induction, Number Theory, Functions, Equivalence Relations, Partial-Order Relations, Combinatorics, and Graph Theory at the level currently covered in CIS 160. This course could be taken immediately following CIS 160. Computation and Programming will play an essential role in this course. The students will be expected to use the Maple programming environment in homework exercises which will include: numerical and symbolic computations, simulations, and graphical displays."
  },
  {
    "dept": "CIS",
    "number": 262,
    "title": "Automata, Computability, and Complexity",
    "prereqs": ["CIS 160"],
    "description": "This course explores questions fundamental to computer science such as which problems cannot be solved by computers, can we formalize computing as a mathematical concept without relying upon the specifics of programming languages and computing platforms, and which problems can be solved efficiently. The topics include finite automata and regular languages, context-free grammars and pushdown automata, Turing machines and undecidability, tractability and NP-completeness. The course emphasizes rigorous mathematical reasoning as well as connections to practical computing problems such as text processing, parsing, XML query languages, and program verification."
  },
  {
    "dept": "CIS",
    "number": 320,
    "title": "Introduction to Algorithms",
    "prereqs": ["CIS 120", "CIS 121", "CIS 160", "CIS 262"],
    "description": "How do you optimally encode a text file? How do you find shortest paths in a map? How do you design a communication network? How do you route data in a network? What are the limits of efficient computation? This course gives a comprehensive introduction to design and analysis of algorithms, and answers along the way to these and many other interesting computational questions. You will learn about problem-solving; advanced data structures such as universal hashing and red-black trees; advanced design and analysis techniques such as dynamic programming and amortized analysis; graph algorithms such as minimum spanning trees and network flows; NP-completeness theory; and approximation algorithms."
  },

  {
    "dept": "CIS",
    "number": 331,
    "title": "Intro to Networks and Security",
    "prereqs": ["CIS 160", "CIS 240"],

    "description": "This course introduces principles and practices of computer and network security. We will cover basic concepts, threat models, and the security mindset; an introduction to cryptography and cryptographic protocols including encryption, authentication, message authentication codes, hash functions, public-key cryptography, and secure channels; an introduction to networks and network security including IP, TCP, routing, network protocols, web architecture, attacks, firewalls, and intrusion detection systems; an introduction to software security including defensive programming, memory protection, buffer overflows, and malware; and discuss broader issues and case studies such as privacy, security and the law, digital rights management, denial of service, and ethics."
  },

  {
    "dept": "CIS",
    "number": 334,
    "title": "Advanced Topics in Algorithms",
    "prereqs": ["CIS 320"],
    "description": "Can you check if two large documents are identical by examining a small number of bits? Can you verify that a program has correctly computed a function without ever computing the function? Can students compute the average score on an exam without ever revealing their scores to each other? Can you be convinced of the correctness of an assertion without ever seeing the proof? The answer to all these questions is in the affirmative provided we allow the use of randomization. Over the past few decades, randomization has emerged as a powerful resource in algorithm design. This course would focus on powerful general techniques for designing randomized algorithms as well as specific representative applications in various domains, including approximation algorithms,  cryptography and number theory, data structure design, online algorithms, and parallel and distributed computation."
  },
  {
    "dept": "CIS",
    "number": 341,
    "title": "Compilers and Interpreters",
    "prereqs": ["CIS 121", "CIS 240"],
    "description": "You know how to program, but do you know how to implement a programming language? In CIS341 you'll learn how to build a compiler. Topics covered include: lexical analysis, grammars and parsing, intermediate representations, syntax-directed translation, code generation, type checking, simple dataflow and control-flow analyses, and optimizations. Along the way, we study objects and inheritance, first-class functions (closures), data representation and runtime-support issues such as garbage collection. This is a challenging, implementation-oriented course in which students build a full compiler from a simple, typed object-oriented language to fully operational x86 assembly. The course projects are implemented using OCaml, but no knowledge of OCaml is assumed."
  },

  {
    "dept": "CIS",
    "number": 350,
    "title": "Software Design/Engineering",
    "prereqs": ["CIS 121"],
    "description": "You know how to write a \"program\". But how do you create a software \"product\" as part of a team, with customers that have expectations of functionality and quality? This course introduces students to various tools (source control, automated build systems, programming environments, test automation, etc.) and processes (design, implementation, testing, and maintenance) that are used by professionals in the field of software engineering. Topics will include: software development lifecycle; agile and test-driven development; source control and continuous integration; requirements analysis; object-oriented design and testability; Android application development; software testing; refactoring; and software quality metrics."
  },
  {
    "dept": "CIS",
    "number": 371,
    "title": "Computer Organization and Design",
    "prereqs": ["CIS 240"],
    "description": "This is the second computer organization course and focuses on computer hardware design. Topics covered are: (1) basic digital system design including finite state machines, (2) instruction set design and simple RISC assembly programming, (3) quantitative evaluation of computer performance, (4) circuits for integer and floating-point arithmetic, (5) datapath and control, (6) micro-programming, (7) pipelining, (8) storage hierarchy and virtual memory, (9) input/output, (10) different forms of parallelism including instruction level parallelism, data-level parallelism using both vectors and message-passing multi-processors, and thread-level parallelism using shared memory multiprocessors. Basic cache coherence and synchronization."
  },

  {
    "dept": "CIS",
    "number": 380,
    "title": "Computer Operating Systems",
    "prereqs": ["CIS 240"],
    "description": "This course surveys methods and algorithms used in modern operating systems. Concurrent distributed operation is emphasized. The main topics covered are as follows: process synchronization; interprocess communications; concurrent/distributed programming languages; resource allocation and deadlock; virtual memory; protection and security; distributed operation; distributed data; performance evaluation."
  },

  {
    "dept": "CIS",
    "number": 390,
    "title": "Robotics: Planning and Perception",
    "prereqs": ["CIS 121", "MATH 240 or equivalent"],
    "description": "This introductory course will present basic principles of robotics with an emphasis  to computer science aspects. Algorithms for planning and perception will be studied and implemented on actual robots. While planning is a fundamental problem in artificial intelligence and decision making, robot planning refers to finding a path from A to B in the presence of obstacles and by complying with the kinematic constraints of the robot. Perception involves the estimation of the robot’s motion and path as well as the shape of the environment from sensors. In this course, algorithms will be implemented in Python on mobile platforms on ground and in the air. No prior experience with Python is needed but we require knowledge of data structures, linear algebra, and basic probability."
  },

  {
    "dept": "CIS",
    "number": 398,
    "title": "Quantum Computer and Information Science",
    "prereqs": ["PHYS 151", "MATH 240", "MATH 312/314", "CIS 160", "CIS 262"],
    "description": "The purpose of this course is to introduce undergraduate students in computer science and engineering to quantum computers (QC) and quantum information science (QIS). This course is meant primarily for juniors and seniors in CIS. No prior knowledge of quantum mechanics (QM) is assumed."
  },

  {
    "dept": "CIS",
    "number": 400,
    "title": "Senior Project",
    "prereqs": ["Senior standing or permission of instructor"],

    "description": "Design and implementation of a significant piece of work: software, hardware or theory. In addition, emphasis on technical writing and oral communication skills. Students must have an abstract of their Senior Project, which is approved and signed by a Project Adviser, at the end of the second week of Fall classes. The project continues during two semesters; students must enroll in CIS 401 during the second semester. At the end of the first semester, students are required to submit an intermediate report and give a class presentation describing their project and progress. Grades are based on technical writing skills (as per submitted report), oral presentation skills (as per class presentation) and progress on the project. These are evaluated by the Project Adviser and the Course Instructor."
  },

  {
    "dept": "CIS",
    "number": 401,
    "title": "Senior Project",
    "prereqs": ["CIS 400", "Senior standing or permission of instructor"],

    "description": "Continuation of CIS 400. Design and implementation of a significant piece of work: software, hardware or theory. Students are required to submit a final written report and give a final presentation and demonstration of their project. Grades are based on the report, the presentation and the satisfactory completion of the project. These are evaluated by the Project Advisor and the Course Instructor."
  },

  {
    "dept": "CIS",
    "number": 419,
    "title": "Applied Machine Learnin",
    "prereqs": ["CIS 121"],
    "description": "Machine learning has been essential to the success of many recent technologies, including autonomous vehicles, search engines, genomics, automated medical diagnosis, image recognition, and social network analysis, among many others. This course will introduce the fundamental concepts and algorithms that enable computers to learn from experience, with an emphasis on their practical application to real problems. This course will introduce supervised learning (decision trees, logistic regression, support vector machines, Bayesian methods, neural networks and deep learning), unsupervised learning (clustering, dimensionality reduction), and reinforcement learning. Additionally, the course will discuss evaluation methodology and recent applications of machine learning, including large scale learning for big data and network analysis. If CIS 519/Introduction to Machine Learning is used to fulfill the CIS/MSE core requirement, then CIS 520/Machine Learning, cannot be used to fulfill the CIS/MSE core requirement, but can be used as a CIS elective. If CIS 520/Machine Learning is used to fulfill the CIS/MSE core requirement, then CIS 519/Introduction to Machine Learning, cannot be used to fulfill the CIS/MSE core requirement, but can be used as a CIS elective."
  },

  {
    "dept": "CIS",
    "number": 421,
    "title": "Artificial Intelligenc",
    "prereqs": ["CIS 121", "ESE 301", "STAT 430 recommended"],

    "description": "This course investigates algorithms to implement resource-limited knowledge-based agents which sense and act in the world. Topics include, search, machine learning, probabilistic reasoning, natural language processing, knowledge representation and logic. After a brief introduction to the language, programming assignments will be in Python."
  },

  {
    "dept": "CIS",
    "number": 436,
    "title": "Introduction to Computational Biology and Biological Modeling",
    "prereqs": [
      "200 level or higher biology courses",
      "MATH 104",
      "Intro statistics",
      "Probability theory and linear algebra highly recommended"
    ],
    "description": "The goal of this course is to develop a deeper understanding of techniques and concepts used in Computational Biology. The course will strive to focus on a small set of approaches to gain both theoretical and practical understanding of the methods. We will aim to cover practical issues such as programming and the use of programs, as well as theoretical issues such as algorithm design, statistical data analysis, theory of algorithms and statistics. This course WILL NOT provide a broad survey of the field nor teach specific tools but focus on a deep understanding of a small set of topics. We will discuss string algorithms, hidden markov models, dimension reduction, and machine learning (or phylogeny estimation) for biomedical problems."
  },

  {
    "dept": "CIS",
    "number": 441,
    "title": "Embedded Software for Life-Critical Application",
    "description": "The goal of this course is to give students greater design and implementation experience in embedded software development and to teach them how to model, design, verify, and validate safety critical systems in a principled manner. Students will learn the principles, methods, and techniques for building life-critical embedded systems, ranging from requirements and models to design, analysis, optimization, implementation, and validation. Topics will include modeling and analysis methods and tools, real-time programming paradigms and languages, distributed real-time systems, global time, time-triggered communications, assurance case, software architecture, evidence-based certification, testing, verification, and validation. The course will include a series of projects that implements life-critical embedded systems (e.g., pacemaker, infusion pumps, closed-loop medical devices)."
  },

  {
    "dept": "CIS",
    "number": 450,
    "title": "Database and Information Systems",
    "prereqs": ["CIS 160", "CIS 121"],

    "description": "This course provides an introduction to the broad field of database and information systems, covering a variety of topicsrelating to structured data, ranging from data modeling to logical foundationsand popular languages, to system implementations. Wewill study the theory ofrelational and XML data design; the basics of query languages; efficientstorage of data, execution of queries and query optimization; transactions andupdates; web-database development; and \"big data\" and NoSQL systems."
  },

  {
    "dept": "CIS",
    "number": 455,
    "title": "Internet and Web Systems",
    "prereqs": [
      "Familiarity with threads and concurrency",
      "Strong Java programming"
    ],

    "description": "This course focuses on the challenges encountered in building Internet and web systems: scalability, interoperability (of data and code), security and fault tolerance, consistency models, and location of resources, services, and data. We will examine how XML standards enable information exchange; how web services support cross-platform interoperability (and what their limitations are); how to build high-performance application servers; how \"cloud computing\" services work; how to perform Akamai-like content distribution; and how to provide transaction support in distributed environments. We will study techniques for locating machines, resources, and data (including directory systems, information retrieval indexing, ranking, and web search); and we will investigate how different architectures support scalability (and the issues they face). We will also examine ideas that have been proposed for tomorrow's Web, and we will see some of the challenges, research directions, and potential pitfalls. An important goal of the course is not simply to discuss issues and solutions, but to provide hands-on experience with a substantial implementation project. This semester's project will be a peer-to-peer implementation of a Google-style search engine, including distributed, scalable crawling; indexing with ranking; and even PageRank. As a side-effect of the material of this course, you will learn about some aspects of large-scale software development: assimilating large APIs, thinking about modularity, reading other people's code, managing versions, debugging, etc."
  },

  {
    "dept": "CIS",
    "number": 460,
    "title": "Interactive Computer Graphics",
    "prereqs": [
      "CIS 120",
      "CIS 121",
      "CIS 240 is useful, but is not a requirement"
    ],
    "description": "This course focuses on programming the essential mathematical and geometric concepts underlying modern computer graphics. Using 3D interactive implementations, it covers fundamental topics such as mesh data structures, transformation sequences, rendering algorithms, and curve interpolation for animation. Students are also introduced to two programming languages widely used in the computer graphics industry: C++ and GLSL. The curriculum is heavily project-based, and culminates in a group project focused on building an interactive first-person world exploration application using the various real-time interaction and rendering algorithms learned throughout the semester."
  },

  {
    "dept": "CIS",
    "number": 461,
    "title": "Advanced Renderin",
    "prereqs": [
      "Working knowledge of C++ programming",
      "Knowledge of vector geometry"
    ],
    "description": "This course is designed to provide a comprehensive  overview to computer graphics techniques in 3D modeling, image synthesis, and rendering. Topics   cover: geometric transformations, geometric algorithms, software systems, 3D object models (surface, volume and implicit), visible surface algorithms, image synthesis, shading, mapping, ray tracing, radiosity, global illumination, sampling, anti-aliasing, Monte Carlo path tracing, and photonmapping. Prerequisites: A working knowledge of C++ programming isrequired (one year programming experience in general). Knowledge of vector geometry is useful."
  },

  {
    "dept": "CIS",
    "number": 462,
    "title": "Computer Animation",
    "prereqs": [
      "Major concepts in linear algebra (i.e. vector, matrix math)",
      "Curves and surfaces, dynamical systems (e.g. 2nd order mass-spring-damper systems)",
      "3D computer graphics has also been assumed in the preparation of the course materials."
    ],
    "description": "This course covers core subject matter common to the fields of robotics, character animation and embodied intelligent agents. The intent of the course is to provide the student with a solid technical foundation for developing, animating and controlling articulated systems used in interactive computer games, virtual reality simulations and high-end animation applications. The course balances theory with practice by \"looking under the hood\" of current animation systems and authoring tools and exams the technologies and techniques used from both a computer science and engineering perspective. Topics covered include: geometric coordinate systems and transformations; quaternions; parametric curves and surfaces; forward and inverse kinematics; dynamic systems and control; computer simulation; keyframe, motion capture and procedural animation; behavior-based animation and control; facial animation; smart characters and intelligent agents."
  },

  {
    "dept": "CIS",
    "number": 482,
    "title": "Logic In Computer Science",
    "prereqs": ["CIS 160"],
    "description": "Logic has been called the calculus of computer science as it plays a fundamental role in computer science, similar to that played by calculus in the physical sciences and traditional engineering disciplines. Indeed, logic is useful in areas of computer science as disparate as architecture (logic gates), software engineering (specification and verification), programming languages (semantics, logic programming), databases (relational algebra and SQL), artificial intelligence (automatic theorem proving), algorithms (complexity and expressiveness), and theory of computation (general notions of computability). CIS 482 provides the students with a thorough introduction to mathematical logic, covering in depth the topics of syntax, semantics, decision procedures, formal proof systems, and soundness and completeness for both propositional and first-order logic. The material is taught from a computer science perspective, with an emphasis on algorithms, computational complexity, and tools. Projects will focus on problems in circuit design, specification and analysis of protocols, and query evaluation in databases."
  },

  {
    "dept": "CIS",
    "number": 497,
    "title": "Senior Project (DMD Students only)",
    "prereqs": ["Senior standing or permission of instructor"],
    "description": "The goal of this course is to provide an opportunity for seniors to define, design, and execute a project of your own choosing that demonstrates the technical skills and abilities that you have acquired during your 4 years as undergraduates. Evaluation is based on selecting an interesting topic, completing appropriate research on the state of the art in that area, communicating your objectives in writing and in presentations, accurately estimating what resources will be required to complete your chosen task, coding necessary functionality, and executing your plan."
  }
]
